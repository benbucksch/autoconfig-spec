{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-01-30T00:14:48.274902+00:00",
  "repo": "benbucksch/autoconfig-spec",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOKo_bRc57RGcD",
      "title": "Allow oAuth2 clientSecret ",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/1",
      "state": "CLOSED",
      "author": "NiasSt90",
      "authorAssociation": "NONE",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "In your xml format description [here](https://www.bucksch.org/1/projects/thunderbird/autoconfiguration/config-file-format.html) there was an `oauth2` block to configure a individuell oauth2/oidc configuration.\r\nBut these configuration sections lacks  the option to provide a `clientId`/`clientSecret` like in the following example.\r\n\r\n```xml\r\n<incomingServer type=\"imap\">\r\n      <hostname>imap.my-server.com</hostname>\r\n      <port>993</port>\r\n      <socketType>SSL</socketType>\r\n      <username>%EMAILADDRESS%</username>\r\n      <authentication>OAuth2</authentication>\r\n      <authentication>password-cleartext</authentication>\r\n      <oAuth2>\r\n        <issuer>sso.my-keycloak.com/auth/realms/myRealm<issuer>\r\n        <scope>imap<scope>\r\n        <authURL>https://sso.my-keycloak.com/auth/realms/myRealm/protocol/openid-connect/auth</authURL>\r\n        <tokenURL>https://sso.my-keycloak.com/auth/realms/myRealm/protocol/openid-connect/token</tokenURL>\r\n        <clientId>MUA</clientId>\r\n        <clientSecret>not-so-secret</clientSecret>\r\n      <oAuth2>\r\n    </incomingServer>\r\n```\r\n\r\nIn my opinion is this easier than to try to create dynamically a client on the target IDP. \r\n(mentioned [here](https://bugzilla.mozilla.org/show_bug.cgi?id=1602166)) \r\n",
      "createdAt": "2024-01-05T21:51:26Z",
      "updatedAt": "2024-02-07T01:28:53Z",
      "closedAt": "2024-02-07T01:28:19Z",
      "comments": [
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "I agree. There's already `<clientID>`, and I just added `<clientSecret>`.\r\n\r\nFIXED",
          "createdAt": "2024-02-07T01:28:20Z",
          "updatedAt": "2024-02-07T01:28:20Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOKo_bRc57UQXH",
      "title": "Mention MTA-STS regarding MX record security considerations",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/3",
      "state": "CLOSED",
      "author": "link2xt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "MTA-STS can be used to secure MX records, e.g. https://mta-sts.gmail.com/.well-known/mta-sts.txt contains `mx` records that are allowed to be in DNS.\r\n\r\nThis could be mentioned in relation to\r\nhttps://github.com/benbucksch/autoconfig-spec/commit/335bd87bba671052a44ac7d1dfad69cde76f5210",
      "createdAt": "2024-01-07T00:42:24Z",
      "updatedAt": "2024-02-07T00:38:37Z",
      "closedAt": "2024-02-06T22:19:41Z",
      "comments": [
        {
          "author": "cketti",
          "authorAssociation": "NONE",
          "body": "Can you explain how MTA-STS would help in the context of autoconfig?",
          "createdAt": "2024-02-06T13:22:23Z",
          "updatedAt": "2024-02-06T13:22:23Z"
        },
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Current draft describes MX record fallback:\r\nhttps://github.com/benbucksch/autoconfig-spec/blob/fdc206eb2c02eab22b5d167eb6b7da07b4591f83/draft-autoconfig-1.md#mx\r\n\r\nAnd in security considerations it says that relying on DNS is not secure:\r\nhttps://github.com/benbucksch/autoconfig-spec/blob/fdc206eb2c02eab22b5d167eb6b7da07b4591f83/draft-autoconfig-1.md#dns\r\n\r\nUnlike HTTPS connection to retrieve autoconfig XML, MX records can be easily spoofed if they are requested by a client device via malicious Wi-Fi hotspot. Let's say the client requests MX records for gmail.com, it will normally get `gmail-smtp-in.l.google.com.`, `alt1.gmail-smtp-in.l.google.com.`, ..., `alt4.gmail-smtp-in.l.google.com.`.\r\n\r\nIn this case google.com may be a malicious domain controlled by an attacker. But we can retrieve https://mta-sts.gmail.com/.well-known/mta-sts.txt and check the lines which come from gmail.com HTTPS host confirming that these MX records are not spoofed:\r\n```\r\nmx: gmail-smtp-in.l.google.com\r\nmx: *.gmail-smtp-in.l.google.com\r\n```",
          "createdAt": "2024-02-06T19:33:43Z",
          "updatedAt": "2024-02-06T19:33:43Z"
        },
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The other option would be to reduce the scope of the spec, describe how autoconfig over HTTPS works and not move the description of insecure alternatives (SRV, retrieving autoconfig XML over HTTP, MX records etc.) somewhere else.",
          "createdAt": "2024-02-06T19:36:52Z",
          "updatedAt": "2024-02-06T19:36:52Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "@link2xt The MX lookup is necessary to get decent detection rates. They need to stay in the spec. If we cannot rely on DNS, then our detection rates are very low.\r\n\r\nThe spec describes multiple ways and factors to mitigate this risk.",
          "createdAt": "2024-02-06T20:52:14Z",
          "updatedAt": "2024-02-06T20:58:38Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "@link2xt @cketti\r\n1. How widely is MTA-STS supported?\r\n\r\n> MX records can be easily spoofed if they are requested by a client device via malicious Wi-Fi hotspot\r\n\r\n2. The spec already mentions this risk and recommends to use DNS over HTTPS (DoH) to verify the MX records, to avoid such scenarios. What does MTA-STS add on top of that?",
          "createdAt": "2024-02-06T20:55:47Z",
          "updatedAt": "2024-02-06T20:55:59Z"
        },
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> 1. How widely is MTA-STS supported?\r\n\r\nI have no statistics at hand, but some list I collected looking into it some time ago, seems it is supported by many major providers:\r\n- https://mta-sts.google.com/.well-known/mta-sts.txt\r\n- https://mta-sts.gmx.com/.well-known/mta-sts.txt\r\n- https://mta-sts.comcast.net/.well-known/mta-sts.txt\r\n- https://mta-sts.belastingdienst.nl/.well-known/mta-sts.txt\r\n- https://mta-sts.protonmail.com/.well-known/mta-sts.txt\r\n- https://mta-sts.hardenize.com/.well-known/mta-sts.txt\r\n- https://mta-sts.yahoo.com/.well-known/mta-sts.txt\r\n\r\nYou can also find a lot of domains supporting it at https://www.google.com/search?q=inurl%3Amta-sts.txt\r\n\r\nGoogle Workspace supports it, but AFAIK does not require to setup mta-sts subdomain domain, it is optional: https://support.google.com/a/answer/9261504\r\n\r\n> 2\\. The spec already mentions this risk and recommends to use DNS over HTTPS (DoH) to verify the MX records, to avoid such scenarios. What does MTA-STS add on top of that?\r\n\r\nIn Delta Chat we are not going to use DoH because we don't want any dependency on central servers such as Google/Cloudflare DoH in the client. The only exception is the 8.8.8.8 fallback due to unresolved problems with DNS resolution in the dependency, map tiles in experimental location streaming feature and https://autoconfig.thunderbird.net/v1.1/ requests which we should probably just replace with an ISPDB snapshot preloaded into the binary.\r\n\r\nOur current solution is to query MX with system DNS, but then only allow to configure Gmail this way. So Google Workspace domains work, but an attacker controlling malicious Wi-Fi hotspot has to be Google to make any use of MX response spoofing.",
          "createdAt": "2024-02-06T21:33:33Z",
          "updatedAt": "2024-02-06T21:34:23Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> Delta Chat we are not going to use DoH because we don't want any dependency on central servers such as Google/Cloudflare DoH in the client\r\n\r\nI understand why you don't want to give information to third parties, esp. Google and co.\r\n\r\nTo run the full autoconfig, you will need the ISPDB, so you have this point of centralization anyways. You could use a DoH server of your own, or on the domain/owner of the ISPDB.\r\n\r\n*How* you validate the MX entry is your own choice.\r\n\r\nIndeed, it's maybe a good idea to add the MTA-STS in the same section where I mention DoH, as an alternative.",
          "createdAt": "2024-02-06T21:37:55Z",
          "updatedAt": "2024-02-06T21:39:17Z"
        },
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "MTA-STS works similarly to HSTS. The other MTA first makes a DNS query and then caches the result.\n\nAutoconfig will make the connection only once or very rarely, so there simply is no way to tell whether the server does support MTA STS.",
          "createdAt": "2024-02-06T21:41:37Z",
          "updatedAt": "2024-02-06T21:41:37Z"
        },
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "BTW, why is doing MX queries over DoH mentioned, but SRV queries were rejected completely?",
          "createdAt": "2024-02-06T21:51:23Z",
          "updatedAt": "2024-02-06T21:51:23Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> https://mta-sts.gmx.com/.well-known/mta-sts.txt\r\n\r\nThis specific example is not really that helpful, because don't need the MX record to look up the ISP for gmx.com, because it's gmx.com. (And we have gmx.com in the ISPDB.) We need the MX specifically for domain hosters, and the customer domains typically do *not* have MTA-STS. Indeed, not even gmx.biz (which is a gmx.net domain) has it: https://mta-sts.gmx.biz/.well-known/mta-sts.txt gives \"host not found\". So, for exactly those cases where we need the MX lookup, MTA-STS does not work, in current deployments, and is unlikely to work in the future, due to the configuration overhead per customer domain. MTA-STS is exactly the same method as autoconfig, so if you set up MTA-STS, you might just as well also set up autoconfig.\r\n\r\nI was about to add the following paragraph to section \"DNS\":\r\n\"\r\nThe MX server could be validated using MTA-STS, i.e.\r\nhttps://mta-sts.%EMAILDOMAIN%/.well-known/mta-sts.txt\r\nHowever, that is not widely deployed on customer domains,\r\ntherefore limiting its usefulness.\r\n\"\r\nBut I really doubt it would help anything in practice to make that additional call. In exactly the cases where we need it, it's not deployed.",
          "createdAt": "2024-02-06T21:51:38Z",
          "updatedAt": "2024-02-06T21:53:37Z"
        },
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> BTW, why is doing MX queries over DoH mentioned, but SRV queries were rejected completely?\r\n\r\nI would prefer not to add SRV because they are currently not supported by clients (at least Thunderbird, K-9 and Delta Chat). If they go into RFC, then some clients will support them and some not, so it is still better to just publish autoconfig XML, but complexity will be increased even more. Unless we have a list of existing providers which don't have autoconfig XML but have SRV records, adding this does not help.",
          "createdAt": "2024-02-06T22:03:59Z",
          "updatedAt": "2024-02-06T22:03:59Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "DNS SRV:\r\n> BTW, why ... SRV queries were rejected completely?\r\n\r\nThat's offtopic here, and it's a FAQ, so I wrote #4 for that.\r\n\r\n> Unless we have a list of existing providers which don't have autoconfig XML but have SRV records, adding this does not help.\r\n\r\nExactly.",
          "createdAt": "2024-02-06T22:16:40Z",
          "updatedAt": "2024-02-06T22:19:48Z"
        },
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> But I really doubt it would help anything in practice to make that additional call. In exactly the cases where we need it, it's not deployed.\r\n\r\nLet's close the issue then, at least for now.\r\n\r\nThe conclusion is that MX record lookup is optional and is intended for legacy setups which don't support autoconfig, so they are unlikely to support mta-sts as well. We better push them to support `https://autoconfig.*`.",
          "createdAt": "2024-02-06T22:19:41Z",
          "updatedAt": "2024-02-06T22:19:41Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> MX record lookup is optional\r\n\r\nActually, the MX record lookup is important for the autoconfig protocol. To fully support the protocol, and to get decent detection rates, the DNS MX lookup is needed.\r\n\r\nThe result is: If you're concerned about DNS spoofing, you can use your own DoH server or that of the ISPDB to validate the results. The spec also mentions multiple other mitigations of different nature. The combination works reasonably well.\r\n\r\n> We better push them to support https://autoconfig.*.\r\n\r\nAgreed. The -02 version of the spec has a section with recommendations for mail providers, both single domain providers and customer domain hosters.",
          "createdAt": "2024-02-06T22:23:33Z",
          "updatedAt": "2024-02-06T22:28:13Z"
        },
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Actually, the MX record lookup is important for the autoconfig protocol. To fully support the protocol, and to get decent detection rates, the DNS MX lookup is needed.\r\n\r\nIn Delta Chat I think we are not going to support MX lookup and say that provider should provide autoconfig, add them to preloaded provider database or recommend users to switch to a different provider, e.g. not use their work/university email if it has this broken autoconfig setup, but use their other email or create a [chatmail](https://delta.chat/en/2023-12-13-chatmail) account just for chatting. But this usecase is different from mail clients which care about corporate email setups, e.g. Evolution, Outlook, Thunderbird etc. \r\n\r\n> you can use your own DoH server or that of the ISPDB to validate the results\r\n\r\nWe already have a built-in [provider database](https://github.com/deltachat/provider-db), may at some point import Thunderbird ISPDB in there and stop requesting it as well.",
          "createdAt": "2024-02-07T00:26:26Z",
          "updatedAt": "2024-02-07T00:28:56Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "That's of course up to you, yes. I understand that your usecase is different.",
          "createdAt": "2024-02-07T00:28:07Z",
          "updatedAt": "2024-02-07T00:28:07Z"
        },
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> That's of course up to you, yes. I understand that your usecase is different.\r\n\r\nIt would be nice to turn \"If the previous mechanisms yield no result, the client may perform a DNS MX lookup on the email domain, and retrieve the MX server (incoming email server) for that domain.\" into a formal \"MAY\" so we can skip it but still be considered a proper implementation from IETF point of view.",
          "createdAt": "2024-02-07T00:32:49Z",
          "updatedAt": "2024-02-07T00:32:49Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "It's intentionally mandatory for full spec support, because otherwise detection rates go down too much. See section 4, last paragraph. https://benbucksch.github.io/autoconfig-spec/draft-autoconfig-1.html#name-config-retrieval-for-mail-c",
          "createdAt": "2024-02-07T00:36:08Z",
          "updatedAt": "2024-02-07T00:38:37Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOKo_bRc5-d1sf",
      "title": "Reasons why DNS SRV is not in the spec",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/4",
      "state": "CLOSED",
      "author": "benbucksch",
      "authorAssociation": "OWNER",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "Why do we not support DNS SRV:\r\n\r\n1. DNS SRV is just as insecure as HTTP.\r\nEverybody immediately screams \"insecure!!!!\" when they see HTTP, but then the very same persons want support for DNS SRV.\r\n(DNSSEC is not helping, because it's deployed in less than 1% of the domains, and shrinking.)\r\n\r\n2. DNS SRV does not give me all the necessary info for autoconfig. I don't know which authentication methods actually work (see the note in the spec why IMAP/SMTP CAPABILITIES do not help), I don't know the username form, and lots of other info that is in autoconfig. I cannot get a working config with DNS SRV. DNS SRV being insufficient is the whole reason why we need autoconfig.\r\nWe could invent a new SRV server record that points to autoconfig. Given that it would be new, support by mail providers would be very very limited. And it's an additional lookup.\r\n\r\n4. DNS SRV is a very old standard, but nonetheless still not very widely deployed on the \"long tail\" of domains. For large ISPs, we have https://autoconfig.domain and the ISPDB.\r\n\r\n5. DNS MX gives me the same information (in 99.5% of the cases), and it's available on 100% of the domains.\r\n\r\nIt's the combination of all these factors (but particularly 1 and 2) which make DNS SRV very unattractive.\r\n\r\nWe already make over a dozen server requests for a single email address autoconfig. We need to limit the number of queries. If a query doesn't significantly add to the detection rates, nor helps with an important case, it shouldn't be in the spec.",
      "createdAt": "2024-02-06T22:08:13Z",
      "updatedAt": "2024-02-06T22:30:51Z",
      "closedAt": "2024-02-06T22:19:16Z",
      "comments": []
    },
    {
      "number": 5,
      "id": "I_kwDOKo_bRc5-d3FM",
      "title": "https://autoconfig.ispdb.net/v1.1/ does not exist",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/5",
      "state": "CLOSED",
      "author": "link2xt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "Since commit\r\nhttps://github.com/benbucksch/autoconfig-spec/commit/702fc975c969432ce5ed14354c5e75bf1f1ad936\r\nthere is a sentence\r\n\"A public mail config database is available at base URL `https://autoconfig.ispdb.net/v1.1/`.\"\r\n\r\nIt should either be removed or reverted to https://autoconfig.thunderbird.net/v1.1/, which is the standard ISPDB used by Thunderbird, K-9 and Delta Chat.\r\n\r\nI think it is fine to keep Thunderbird URL here.",
      "createdAt": "2024-02-06T22:13:05Z",
      "updatedAt": "2024-02-07T01:23:42Z",
      "closedAt": "2024-02-07T01:23:42Z",
      "comments": [
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "It will exist (under `/v1/`).",
          "createdAt": "2024-02-06T22:35:30Z",
          "updatedAt": "2024-02-06T22:36:21Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "I've shortened the base URL to https://v1.ispdb.net/\r\n\r\nNeed to wait for DNS to update for it to go live.",
          "createdAt": "2024-02-07T00:00:50Z",
          "updatedAt": "2024-02-07T00:01:07Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOKo_bRc5-ei0R",
      "title": "mAuth specification",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/6",
      "state": "CLOSED",
      "author": "link2xt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "Specification refers to mAuth (OAuth for email), but there is no link to mAuth. Is there an existing specification for it?",
      "createdAt": "2024-02-07T00:38:12Z",
      "updatedAt": "2024-07-24T01:33:00Z",
      "closedAt": "2024-07-24T01:33:00Z",
      "comments": [
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "It is in the works.",
          "createdAt": "2024-02-07T00:38:53Z",
          "updatedAt": "2024-02-07T00:38:53Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "Here you are :)\r\n* https://benbucksch.github.io/mauth-spec/draft-mauth.html\r\n* https://github.com/benbucksch/mauth-spec\r\n* https://datatracker.ietf.org/doc/draft-bucksch-mauth/\r\n\r\nFIXED",
          "createdAt": "2024-07-24T01:33:00Z",
          "updatedAt": "2024-07-24T01:33:00Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOKo_bRc6AIhVh",
      "title": "Backwards compatibility",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/7",
      "state": "CLOSED",
      "author": "cketti",
      "authorAssociation": "NONE",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "The document currently contains this text:\r\n\r\n> The purpose of this paper is to document and specify what is deployed in the wild.\r\n\r\nHowever, that doesn't seem to be the case. For example, the main URL in the document is `https://autoconfig.%EMAILDOMAIN%/.well-known/mail-v1.xml?emailaddress=%EMAILADDRESS%` as opposed to `https://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%` that is used by current implementations.\r\n\r\nWhat is the purpose of this document? Create a new standard loosely based on what is currently used? Or document the status quo?\r\nI think either one is fine. But it should be stated clearly in the document.",
      "createdAt": "2024-02-22T18:40:44Z",
      "updatedAt": "2024-05-07T16:08:48Z",
      "closedAt": "2024-05-07T16:08:47Z",
      "comments": [
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "The purpose was to only document what is deployed.\r\nThen people came and wanted all kinds of changes.\r\n\r\nHow about:\r\n\"The purpose of this paper is to document and specify what is deployed in the wild, and in some cases adjust it to current best practices.\"\r\n?",
          "createdAt": "2024-02-23T00:32:46Z",
          "updatedAt": "2024-02-23T00:32:46Z"
        },
        {
          "author": "cketti",
          "authorAssociation": "NONE",
          "body": "I don't think that clears things up. Changing the URLs is an incompatible change. So effectively this is creating a new standard. At that point you might as well change everything else people complain about (e.g. use JSON instead of XML).\r\n\r\nIf you want to document what's currently deployed, you could still add new things. But it has to be done in a backwards compatible way. E.g. use a different authentication identifier for mAuth instead of \"OAuth2\" which is already in use for something else.",
          "createdAt": "2024-02-23T14:43:08Z",
          "updatedAt": "2024-02-23T14:43:08Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "The URL changes I made are backwards compatible. The new URLs are different, but the old ones are still in there for backwards compat.\r\n\r\n> If you want to document what's currently deployed, you could still add new things.\r\n\r\nThat's what I'm doing. Did you find a case where I _removed_ an URL that is important in practice? If so, I'd like to know.\r\n\r\n> E.g. use a different authentication identifier for mAuth instead of \"OAuth2\" which is already in use for something else.\r\n\r\nNobody uses `<oAuth2>` yet, so that's not a backwards incompatible change.",
          "createdAt": "2024-02-23T16:32:02Z",
          "updatedAt": "2024-02-23T16:32:02Z"
        },
        {
          "author": "cketti",
          "authorAssociation": "NONE",
          "body": "### Section [3.1](https://datatracker.ietf.org/doc/html/draft-bucksch-autoconfig-02#section-3.1):\r\n\r\n```xml\r\n<!-- Authentication methods:\r\n     [\u2026]\r\n     \"OAuth2\":\r\n               mAuth. Should be added only as second alternative.\r\n     [\u2026]\r\n-->\r\n<authentication>password-cleartext</authentication>\r\n```\r\n\r\n`OAuth2` is currently used with providers like Gmail that require manual client registration before OAuth2 can be used. This is incompatible with the proposed mAuth mechanism. The value for mAuth could be `mAuth` or something like `OAuth2-static`.\r\n\r\n### Section [4.1](https://datatracker.ietf.org/doc/html/draft-bucksch-autoconfig-02#name-mail-provider):\r\n\r\n> * 1.1. `https://autoconfig.%EMAILDOMAIN%/.well-known/mail-v1.xml?emailaddress=%EMAILADDRESS%` (Required)\r\n> * 1.2. `https://%EMAILDOMAIN%/.well-known/autoconfig/mail/config-v1.1.xml` (Optional)\r\n> * 1.3. `http://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml` (Optional)\r\n\r\nThe list of URLs used by current implementations is:\r\n\r\n- `https://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%`\r\n- `https://%EMAILDOMAIN%/.well-known/autoconfig/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%`\r\n- `http://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml`\r\n\r\nLeaving out `https://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%` is an incompatible change.\r\n\r\nThe `\u2026/.well-known/mail-v1.xml?\u2026` URL is repeated in section [4.3](https://datatracker.ietf.org/doc/html/draft-bucksch-autoconfig-02#section-4.3), [6.1](https://datatracker.ietf.org/doc/html/draft-bucksch-autoconfig-02#section-6.1), and [6.2](https://datatracker.ietf.org/doc/html/draft-bucksch-autoconfig-02#section-6.2).",
          "createdAt": "2024-02-23T17:00:34Z",
          "updatedAt": "2024-02-23T17:12:08Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> Leaving out https://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS% is an incompatible change.\r\n\r\nThat was probably unintentionally removed. My bad. You're right, that URL should stay for backwards compat. Thanks for catching it.\r\n\r\n(FWIW, for MX, we will put only the new URLs in the spec, because Thunderbird so far does *not* query that old URL for MX.)\r\n\r\n> OAuth2 is currently used with providers like Gmail\r\n\r\nYou mean for `<authentication>OAuth</authentication>` ? Note that the value there did not change. Only the description changed. So, this is a backwards compatible change.\r\n\r\nIf specific email clients (like Thunderbird) do special things for specific providers (like Gmail), that's their business and between Thunderbird and Google. The spec tries to get something working for all email clients and all providers (if they implement the spec) at the same time, without contracts between the parties.",
          "createdAt": "2024-02-23T18:54:50Z",
          "updatedAt": "2024-02-23T18:54:50Z"
        },
        {
          "author": "cketti",
          "authorAssociation": "NONE",
          "body": "Apologies. I had another look. And the URLs currently in use are:\r\n- `https://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%`\r\n- `https://%EMAILDOMAIN%/.well-known/autoconfig/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%`\r\n- `http://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%`\r\n- `http://%EMAILDOMAIN%/.well-known/autoconfig/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%`\r\n\r\nI don't think it makes sense to add yet another URL. Clients already need to issue too many HTTP requests when trying to find server settings. We should work on a deprecation strategy to get rid of some of them, not add more.\r\n\r\nWhat's the advantage of adding another one?\r\nHow is it better for email providers?\r\nHow is it better for email clients?\r\nHow is it better for users?\r\n\r\nIMO adding another URL would put a needless burden on the ecosystem. With no practical upside.\r\n\r\n> (FWIW, for MX, we will put only the new URLs in the spec, because Thunderbird so far does not query that old URL for MX.)\r\n\r\nI don't think that's a good idea. At least Evolution and Nextcloud Mail already use the \"old\" URLs after an MX lookup.\r\n\r\nAlso, using the existing URLs gives us compatibility with services that already deploy autoconfig and support customer domains, but are not in a fallback database. Example: https://github.com/thunderbird/autoconfig/pull/86\r\nForcing email providers to make the config available under yet another URL to be able to support customer domains doesn't make sense.\r\n\r\n> You mean for <authentication>OAuth</authentication> ? Note that the value there did not change. Only the description changed. So, this is a backwards compatible change.\r\n\r\nYou keep the name, but change the meaning. How is that not an incompatible change? \r\n\r\n> If specific email clients (like Thunderbird) do special things for specific providers (like Gmail), that's their business and between Thunderbird and Google. The spec tries to get something working for all email clients and all providers (if they implement the spec) at the same time, without contracts between the parties.\r\n\r\nThere are currently configs using the \"OAuth2\" value in Thunderbird's fallback database. Thunderbird uses this value to decide whether to use OAuth2. Almost all of the clients also implementing Autoconfig use this database. Some of them also support OAuth2.\r\nWith this change all currently existing configs using the value \"OAuth2\" will become invalid because the providers don't support mAuth. How should an email client handle that? Currently they (hopefully) ignore the \"OAuth2\" value when they don't support it with a particular provider. Once they add support for mAuth, they won't know if \"OAuth2\" in a config means \"this is OAuth2 with a provider I don't support\" or \"this is mAuth, I can do this\". This problem can be easily avoided by using a different value.\r\n",
          "createdAt": "2024-02-24T01:19:06Z",
          "updatedAt": "2024-02-24T01:19:06Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> I don't think it makes sense to add yet another URL.\r\n\r\nI concur with the goal to keep the amount of URLs that a client as to query as small as possible. I have the same goal.\r\n\r\nI am incorporating feedback from multiple parties. Some IETF people told me to use the `.well-known/` best-practice. Yes, of course that means changing the URL. Given that this should become an Internet standard, we should use best practices. If I don't incorporate the feedback now in some way, I'll just get the same feedback again later.\r\n\r\nWhat you're asking is in direct contradiction to what other people asked me: it's impossible to change it and to not change it. As a compromise, I added the new URL, with the old ones as backwards compat.\r\n\r\nMy plan is to define the URLs as we think they are good, plus those for backwards compat. Then I'll make a server survey and see which backwards compat URLs are actually used. Then, I'll drop all old URLs that don't make any significant difference in the result, or can easily be replaced by talking to a handful ISPs.\r\n\r\n> value \"OAuth2\" ... How should an email client handle that?\r\n\r\nIf you have a complete OAuth2 config, either from the autoconfig under `<mAuth>`, or from hardcoded values in your app, you can use it.\r\n\r\nFor Thunderbird, it has no practical relevance. You have signed the contract with Google and Microsoft, you have a hardcoded client ID, and you handle their expiry times and all. Given that you can handle Gmail now, you can handle it then.\r\n\r\nTo put it in another way: To make systems work well, the sender needs to be very strict, and the receiver needs to be very liberal (Jon Postel). As mail client, you're not the audience for this particular angle. As a mail client, you need to deal with everything. The goal here is to make _ISPs_ configure their OAuth2 servers in a way that will work properly. It's mostly a red flag for _ISPs_ (other than Google, MS and Yahoo) that they need to configure their OAuth2 server in a specific way, if they want this to work. The goal is to make the system saner, so that mail clients don't have to deal with too much crazy nonsense from ISPs.\r\n",
          "createdAt": "2024-02-24T02:10:58Z",
          "updatedAt": "2024-02-24T02:15:21Z"
        },
        {
          "author": "cketti",
          "authorAssociation": "NONE",
          "body": "> I am incorporating feedback from multiple parties. Some IETF people told me to use the .well-known/ best-practice. Yes, of course that means changing the URL. Given that this should become an Internet standard, we should use best practices. If I don't incorporate the feedback now in some way, I'll just get the same feedback again later.\r\n\r\nThat's a reasonable request for a new standard. I think it's quite unreasonable for an existing standard.\r\n\r\nThe goal of the `.well-known` standard is to avoid name conflicts. I don't think this has been a problem for autoconfig in the past, especially since `autoconfig.{emaildomain}` itself is a separate namespace already.\r\n\r\nAdding another URL is a change that requires a lot of people to make changes with absolutely no benefit for them.\r\n",
          "createdAt": "2024-02-26T11:26:50Z",
          "updatedAt": "2024-02-26T11:26:50Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "Hey cketti, after having thought about it, I agree with you.\r\nThe `autoconfig.domain` URL is dedicated to this protocol and therefore there is no conflict with any existing page or deployment setup of live sites. If it was a new protocol, we'd use `.well-known/` simply for consistency, but in this case, backwards compat is critical and using another URL has no advantage.\r\n\r\nI changed the 1.1. URL back to `https://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS%`, as it was before and has always been used in practice. Thanks for your feedback.\r\n\r\nI therefore consider this resolved now. Fixed in git commit d32028722.\r\n\r\nConcerning the OAuth2 vs. mAuth, that is not a breaking change, because no ISP (other than the big 3-4) can do OAuth2 at all right now, and the only objective of mAuth is to do it properly and sanely before we deploy it widely to all ISPs. OAuth2 has never been properly specced for mail, and that's the objective now, before we deploy it to all kinds of small companies.",
          "createdAt": "2024-05-07T16:08:47Z",
          "updatedAt": "2024-05-07T16:08:47Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOKo_bRc6MfDn4",
      "title": "Historical information on Autoconfig",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/8",
      "state": "CLOSED",
      "author": "ben221199",
      "authorAssociation": "NONE",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "# Versions\r\n\r\nThere are 2 versions of Autoconfig: `1.0` and `1.1`.\r\n\r\nAutoconfig 1.0 was supported in ThunderBird 3.0.\r\nAutoconfig 1.1 is supported in ThunderBird 3.1 and later.\r\n\r\n# URLs\r\n\r\nEach version has its own URLs to request XML data.\r\n\r\nFor `1.0` this is:\r\n- `https://autoconfig.$DOMAIN/mail/mozilla.xml?emailaddress=$EMAILADDRESS`\r\n\r\nFor `1.1` this is:\r\n- `http://autoconfig.$DOMAIN/mail/config-v1.1.xml?emailaddress=$EMAILADDRESS`\r\n- `http://$DOMAIN/.well-known/autoconfig/mail/config-v1.1.xml?emailaddress=$EMAILADDRESS` (As fallback)\r\n\r\nNOTE: The variable `emailaddress` is sent, containing the e-mailaddress.\r\n\r\n# ISPDB URLs\r\n\r\nThere is also a central ISP database hosted by ThunderBird that contains some domains. This URL is saved in the `mailnews.auto_config_url` preference.\r\n\r\nFor `1.0` this is:\r\n- `https://live.mozillamessaging.com/autoconfig/`\r\n\r\nFor `1.1` this was:\r\n- `https://live.mozillamessaging.com/autoconfig/v1.1/`\r\n\r\nBut now it is:\r\n- `https://live.thunderbird.net/autoconfig/v1.1/`\r\n\r\nNOTE: The variable `emailaddress` will not be send to the ISPDB.\r\n\r\nNOTE: Since some version 3.0.x (I have to investigate further), it is possible to use `{{domain}}`. If present, ThunderBird will replace this variable with the domain name. Else, it will append it. There is also a variable `{{accounts}}`. That one will always be replaced if present.\r\n\r\n# XML\r\n\r\nBoth versions use XML for sending their information. There are some difference that make them incompatible with each other.\r\n\r\n- `<clientConfig>` - The root element. Both versions present.\r\n  - `<emailProvider>` - The email provider element. Inside `<clientConfig>`. Only once. Both versions present.\r\n    - `<id>` - The email provider ID. In 1.0 it is an element inside `<emailProvider>`. Only once. In 1.1, the element is gone. It is now an attribute on `<emailProvider>`.\r\n    - `<displayName>` - The display name of the email provider. Inside `<emailProvider>`. Only once. Both versions present.\r\n    - `<domain>` - The domain element. Inside `<emailProvider>`. Multiple possible. Both versions present.\r\n    - `<incomingServer>` - An incoming server. Has a `type` attribute. Only `pop3`, `nntp` or `imap` allowed. Inside `<emailProvider>`. Multiple possible in 1.1, not in 1.0. Both versions present.\r\n      - `<hostname>` - Hostname of the server. Inside `<incomingServer>`. Only once. Both versions present.\r\n      - `<port>` - Port of the server. Inside `<incomingServer>`. Only once. Both versions present.\r\n      - `<username>` - Username to use to connect to the server. Inside `<incomingServer>`. Only once. Both versions present.\r\n      - `<socketType>` - Socket type. A value of `plain`, `SSL` or `STARTTLS`. Inside `<incomingServer>`. Only once in 1.0. Multiple possible in 1.1. Both versions present.\r\n      - `<authentication>` - Authentication. For 1.0, a value of `plain` or `secure`. For 1.1, a value of `password-cleartext`, `plain`, `password-encrypted`, `secure`, `GSSAPI` or `NTLM`, where `plain` and `secure` are deprecated. Inside `<incomingServer>`. Only once in 1.0. Multiple possible in 1.1. Both versions present.\r\n      - `<pop3>` - Additional POP3 options. Inside `<incomingServer>`. Only once. Both versions present. Only useful when type is POP3.\r\n        - `<leaveMessagesOnServer>` - Leave messages on server. Boolean. Inside `<pop3>`. Only once. Both versions present.\r\n        - `<daysToLeaveMessagesOnServer>` - Days to leave messages on the server. Integer. Inside `<pop3>`. Only once. Both versions present.\r\n        - `<downloadOnBiff>` - (I don't know what this does, but something with downloading) Boolean. Inside `<pop3>`. Only once. Both versions present.\r\n    - `<outgoingServer>` - An outgoing server. Has a `type` attribute. Only `smtp` allowed. Inside `<emailProvider>`. Multiple possible in 1.1, not in 1.0. Both versions present.\r\n      - `<hostname>` - Hostname of the server. Inside `<outgoingServer>`. Only once. Both versions present.\r\n      - `<port>` - Port of the server. Inside `<outgoingServer>`. Only once. Both versions present.\r\n      - `<username>` - Username to use to connect to the server. Inside `<outgoingServer>`. Only once. Both versions present.\r\n      - `<socketType>` - Socket type. A value of `plain`, `SSL` or `STARTTLS`. Inside `<outgoingServer>`. Only once in 1.0. Multiple possible in 1.1. Both versions present.\r\n      - `<authentication>` - Authentication. For 1.0, a value of `none`, `plain`, `secure` or `smtp-after-pop`. For 1.1, a value of `none`, `client-IP-address`, `smtp-after-pop`, `password-cleartext`, `plain`, `password-encrypted`, `secure`, `GSSAPI` or `NTLM`, where `plain` and `secure` are deprecated. Inside `<outgoingServer>`. Only once in 1.0. Multiple possible in 1.1. Both versions present.\r\n      - `<addThisServer>` - Field to add this server to the SMTP server list. Contains a boolean. Inside `<outgoingServer>`. Only once. Both versions present.\r\n      - `<useGlobalPreferredServer>` - Field to use global preferred server of the SMTP server list. Contains a boolean. Inside `<outgoingServer>`. Only once. Both versions present.\r\n    - `<inputField>` - An input field. Has a `key` attribute and a `label` attribute. The value is inside the element. Inside `<emailProvider>`. Multiple possible. Both versions present. Optional.\r\n\r\nNOTE: In some later versions I came across the `exchange` type for incoming servers (including `<owaURL>`, `<ewsURL>` and `<easURL>`), the `<useGlobalPreferredServer>` inside an incoming server, the `<password>` element in both incoming and outgoing servers and the `OAuth2` authentication option. For now I see them as non-1.1 and I don't list them in the list above.\r\n\r\nNOTE: It doesn't seem that ThunderBird checks version. For now, I didn't list the `version` attribute on `<clientConfig>`.\r\n\r\nNOTE: I didn't yet specify which elements are required and which are optional.\r\n\r\nNOTE: I didn't yet specify which elements support variables and will possibily have some parts replaced by real values.",
      "createdAt": "2024-06-17T10:09:23Z",
      "updatedAt": "2024-09-24T21:03:18Z",
      "closedAt": "2024-09-24T18:48:58Z",
      "comments": [
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "With the information above and after having done some analysis of the code, I think the RFC should define a new version: `1.2`. Why? Because ThunderBird checks and throws on some values at the moment and in the past, so extending 1.0 and/or 1.1 isn't a simple option.\r\n\r\nApart from specifying 1.2, I think the RFC should also give some attention to 1.0 and 1.1. Because ThunderBird doesn't check `version` and `xmlns`, I think we could make really nice section for it. Change some behaviour, but make it compatible with older clients. Some ideas:\r\n\r\n# URLs\r\n\r\nAt the moment, `1.1` uses the following 2 URLs:\r\n- `http://autoconfig.$DOMAIN/mail/config-v1.1.xml?emailaddress=$EMAILADDRESS`\r\n- `http://$DOMAIN//.well-known/autoconfig/mail/config-v1.1.xml?emailaddress=$EMAILADDRESS`\r\n\r\nFor `1.0`, we do to the same:\r\n- `http://autoconfig.$DOMAIN/mail/config-v1.0.xml?emailaddress=$EMAILADDRESS`\r\n- `http://$DOMAIN//.well-known/autoconfig/mail/config-v1.0.xml?emailaddress=$EMAILADDRESS`\r\n\r\nWhat about `https://autoconfig.$DOMAIN/mail/mozilla.xml?emailaddress=$EMAILADDRESS`? For backward compatibility with old ThunderBird, we make it redirect to one of the NEW 1.0 URLs. (Or we server the same content. The server owner is the boss.) New clients should use the new URLs.\r\n\r\n# XML\r\n\r\nFor both versions, DTDs and XSDs will be written. Invalid client configs will fail validation. Valid client configs will pass. Because ThunderBird doesn't check `version` and `xmlns` attributes, we can define them with retroactivity. In 1.0, the `version` attrribute is optional and if present MUST contain `1.0`. In 1.1 the attribute must always be present and be `1.1`. For `xmlns` we will invent an URN XMLNS and register it at IANA. For example: `urn:ietf:params:xml:ns:autoconfig-1.0` and `urn:ietf:params:xml:ns:autoconfig-1.1`. Values and elements added over time will possibly not be allowed.\r\n\r\n# Version 1.2\r\n\r\nWhat about 1.2? We should design it with extendibility in mind. Of course we can define a version 1.3, but I think that is not best practice if a client has to check all versions backwards to find the client config served by a server that it supports. With 1.2 defined, it client has to check 6 URLs (possibly 7 if it also checks `mozilla.xml`). Lets keep it at that amount by doing some smart things.\r\n\r\nSo, the URLs will be:\r\n- `http://autoconfig.$DOMAIN/mail/config-v1.2.xml?emailaddress=$EMAILADDRESS`\r\n- `http://$DOMAIN//.well-known/autoconfig/mail/config-v1.2.xml?emailaddress=$EMAILADDRESS`\r\n\r\nThe version attribute on `<clientConfig>` will be:\r\n- `<clientConfig version=\"1.2\">`\r\n\r\nAnd the XMLNS will be (as example):\r\n- `urn:ietf:params:xml:ns:autoconfig-1.2`",
          "createdAt": "2024-06-17T10:35:06Z",
          "updatedAt": "2024-06-17T10:35:06Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "I saw the latest draft had `1.2` in its version due to https://github.com/benbucksch/autoconfig-spec/commit/4fa94ced85ba2270ffefb18b286fe5db10b6bd05. That is cool.",
          "createdAt": "2024-06-17T10:46:26Z",
          "updatedAt": "2024-06-17T10:46:26Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "The minimal config file for 1.0 is this:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<clientConfig><!--Element name is not checked-->\r\n\t<emailProvider><!--Throwing doesn't work when element is absent, but an exception will occur due to missing children-->\r\n\t\t<incomingServer type=\"imap\"><!--Only checks for \"type\" attribute having one of the three values.-->\r\n\t\t\t<hostname>imap.googlemail.com</hostname><!--Required to be filled during variable replacement-->\r\n\t\t\t<socketType>SSL</socketType><!--Checks if having one of the three values.-->\r\n\t\t\t<authentication>plain</authentication><!--Checks if having one of the two values.-->\r\n\t\t</incomingServer>\r\n\r\n\t\t<outgoingServer type=\"smtp\"><!--Only checks for \"type\" attribute having \"smtp\".-->\r\n\t\t\t<hostname>smtp.googlemail.com</hostname><!--Required to be filled during variable replacement-->\r\n\t\t\t<socketType>SSL</socketType><!--Checks if having one of the three values.-->\r\n\t\t\t<authentication>plain</authentication><!--Checks if having one of the four values.-->\r\n\t\t</outgoingServer>\r\n\t</emailProvider>\r\n</clientConfig>\r\n\r\n```",
          "createdAt": "2024-06-20T12:35:48Z",
          "updatedAt": "2024-06-20T12:35:56Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "Hey,\n\nthanks for the archeological info on autoconfig v1.0. The main difference was support for oAuth2 auth method, IIRC, which required us to allow a fallback auth method, which required us to make auth a 1:n relation (multiple entries), whereas v1.0 allowed only 1 auth method per server.\n\nHowever, it is irrelevant today, because only Thunderbird 3.0 supported v1.0, and that is now very dead (since over 15 years), so it's not worth documenting or discussing it.\n\nIn the process of standardizing, we'll likely make a few backwards-compatible changes and call it v1.2, but still on the old URLs, if they are widely used.\n\nBen Bucksch\n",
          "createdAt": "2024-06-20T21:39:01Z",
          "updatedAt": "2024-06-20T21:39:01Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "P.S. Are you Ben Campbell from Thunderbird? You are appearing only as \"Ben\", which is confusing, because that's also me. Would you mind adding some other word (not number) to your name, so we can differentiate the various persons?\n",
          "createdAt": "2024-06-20T21:43:01Z",
          "updatedAt": "2024-06-20T21:43:01Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "> P.S. Are you Ben Campbell from Thunderbird? You are appearing only as \"Ben\", which is confusing, because that's also me. Would you mind adding some other word (not number) to your name, so we can differentiate the various persons?\r\n\r\nI'm not. I'm a Ben from The Netherlands. I never worked for Thunderbird. I can look into adding my lastname.",
          "createdAt": "2024-06-21T07:14:03Z",
          "updatedAt": "2024-06-21T07:14:03Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "> Hey,\r\n\r\nHello @benbucksch,\r\n\r\nThank you for your response.\r\n\r\n> thanks for the archeological info on autoconfig v1.0. The main difference was support for oAuth2 auth method, IIRC, which required us to allow a fallback auth method, which required us to make auth a 1:n relation (multiple entries), whereas v1.0 allowed only 1 auth method per server.\r\n\r\nDuring this archeological find, I also made the XSD for v1.0, see #9. I also made a script that runs this XSD against ALL (yes, really all) versions of ALL files in https://github.com/ben221199/autoconfig.mozillamessaging.com (a fork of a fork of the Mozilla SVN repository). This dump is downloadable via \"Releases\" to do analysis yourself.\r\n\r\nI programmatically added the `xmlns` attribute. After that, the XSD passed for 99% of the files. The last 1% failed because of bugs in the files. I fixed those programmatically too. For example, `t-online.de imap ssl` and `t-online.de pop ssl` had the socket type `TLS` for a while and this was fixed in https://github.com/ben221199/autoconfig.mozillamessaging.com/commit/788df595c6622c6e607f599960030f1bf951f62e. In my code I added `content = content.replace(\">TLS<\",\">STARTTLS<\");`. I had to fix 6 bugs, but after that I got the full 100%. I believe that my XSD for v1.0 is fully complete. I'm planning to do this too for v1.1.\r\n\r\n> However, it is irrelevant today, because only Thunderbird 3.0 supported v1.0, and that is now very dead (since over 15 years), so it's not worth documenting or discussing it.\r\n\r\nOkay, maybe it is not something for the main document, but would it be okay to have it in an Appendix? Just 1 or 2 paragraphs, the used URLs and the XSD. Nothing more. Because it is in a appendix, people will mostly look to the main document and implement v1.2, but for the people that want to have v1.0 for some reason (like me), the info about v1.0 is there, somewhere at the end.\r\n\r\n> In the process of standardizing, we'll likely make a few backwards-compatible changes and call it v1.2, but still on the old URLs, if they are widely used.\r\n\r\nI think I don't like this solution. Mainly because there is `v1.1` in the URL, while the content is v1.2, which is very confusing and will likely produce many 404 errors. The other reason is that v1.1 is being parsed in a specific way by ThunderBird at the moment. If some value isn't there, the whole parsing could fail. If you serve 1.2 files on those v1.1 URLs, v1.2 files will be handled the same as v1.2 files. This puts many restrictions on extending v1.2 without the parsing going to crash. When introducing new URLs, you don't restrict yourself in being v1.1 compatible. You can introduce what element, attribute or value you want. Also, you can force Thunderbird in rules how to parse it, for example, being lax for an unsupported value and ignore that part instead of strict and throwing exceptions for the whole parsing.\r\n\r\n> Ben Bucksch\r\n\r\nBen van Hartingsveldt",
          "createdAt": "2024-06-21T07:52:34Z",
          "updatedAt": "2024-06-21T07:54:12Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "It's an important goal of this standard to stay compatible with existing configs at ISPs. We control the ISPDB, but not the ISPs. While being logical and clean is very important to me, being compatible is more important.\n\nI'll need to do a survey to see which URLs matter in practice. The choice will depend on that.\n\nv1.0 is really dead since a very long time, and existed only for a few months, but even worth an appendix. v1.1 was essentially a bugfix. I do not want people to feel that they should implement v1.0.\n\nDid you implement autoconfig in some software?\n\nThanks for the XSDs and other validators. That's useful.\n",
          "createdAt": "2024-06-21T08:47:50Z",
          "updatedAt": "2024-06-21T08:47:50Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "sorry, typo: ... *not* even worth....\n\nI wrote:\n> v1.0 is really dead since a very long time, and existed only for a few months, but even worth an appendix.\n",
          "createdAt": "2024-06-21T08:49:46Z",
          "updatedAt": "2024-06-21T08:49:46Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "Hey @ben221199 , if you have an XSD for 1.2, which the specification specifies, I'd be very happy. Please feel free to open another PR for that.\r\n\r\nI think we can close this now. The info will be archived as part of this issue.",
          "createdAt": "2024-09-24T18:48:58Z",
          "updatedAt": "2024-09-24T18:48:58Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "My reaction on #9:\r\n> Hi @benbucksch, sorry for my inactivity last months. I had to focus on some other projects. I will finish 1.1 and add 1.2 as soon as I have time.\r\n\r\nAlso, if possible, I would prefer reopening #9 when I'm done commiting, because it is the original PR with all conversations.",
          "createdAt": "2024-09-24T21:03:16Z",
          "updatedAt": "2024-09-24T21:03:16Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOKo_bRc6QBNO-",
      "title": "XML syntax typos in sample XML",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/10",
      "state": "CLOSED",
      "author": "gabviv73",
      "authorAssociation": "NONE",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "On line 128, the tag is not closed\r\n\r\nWrong:\r\n\r\n      <serverURL>https://jmap.example.com/remote.php/dav<serverURL>\r\n\r\nRight:\r\n\r\n      <serverURL>https://jmap.example.com/remote.php/dav</serverURL>\r\n",
      "createdAt": "2024-07-18T12:30:59Z",
      "updatedAt": "2024-07-24T01:46:50Z",
      "closedAt": "2024-07-24T01:46:50Z",
      "comments": [
        {
          "author": "gabviv73",
          "authorAssociation": "NONE",
          "body": "Same at line 144 , 151, 57, 166.\r\nOn line 235 `&` must be substituted with `&amp;`\r\n",
          "createdAt": "2024-07-18T12:58:04Z",
          "updatedAt": "2024-07-18T12:58:04Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "Thanks! Any other typos or syntax errors that I can fix at the same time?",
          "createdAt": "2024-07-18T13:02:32Z",
          "updatedAt": "2024-07-18T13:02:55Z"
        },
        {
          "author": "gabviv73",
          "authorAssociation": "NONE",
          "body": "Nope to my eyes and to Firefox...\r\nI've used your template to build this: [https://github.com/gabviv73/EmailAutoConfig](https://github.com/gabviv73/EmailAutoConfig). Tested with Thunderbird and it works. Unfortunately, Caldav and Carddav seems to not be implemented in TB autoconfig: am I right ?",
          "createdAt": "2024-07-18T15:29:48Z",
          "updatedAt": "2024-07-18T15:29:48Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> Unfortunately, Caldav and Carddav seems to not be implemented in TB autoconfig: am I right ?\r\n\r\nCorrect. Thunderbird uses RFC 6764.",
          "createdAt": "2024-07-18T15:31:22Z",
          "updatedAt": "2024-07-18T15:31:22Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "FIXED\r\n@gabviv73 Thanks for the report.",
          "createdAt": "2024-07-24T01:46:50Z",
          "updatedAt": "2024-07-24T01:46:50Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOKo_bRc6SeIEO",
      "title": "Preventing spurious \"downgrade\" to heuristics",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/11",
      "state": "CLOSED",
      "author": "link2xt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "Currently the standard specifies that the following URLs should be tried:\r\n1. `https://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml?emailaddress=%EMAILADDRESS% `\r\n2. `https://%EMAILDOMAIN%/.well-known/autoconfig/mail/config-v1.1.xml`\r\n3. `http://autoconfig.%EMAILDOMAIN%/mail/config-v1.1.xml`\r\n\r\nBut it is not specified what the client should do if it fails to connect to these URLs. Some clients attempt heuristics like trying `mail.example.org`, `imap.example.org` etc. subdomains on various ports. This may be a bad idea if autoconfig actually exists but HTTPS connection failed due to a spurious network error or the connection to HTTPS port being blocked.\r\n\r\nMaybe it makes sense to specify that if DNS resolution fails for `autoconfig.example.org`, the client should abort the whole configuration procedure? If `autoconfig.example.org` resolution returns NXDOMAIN then we cannot guarantee anything, but if DNS resolution times out we better not proceed.\r\n\r\nThis way provider publishing on `autoconfig.` subdomain (in contrast to using `.well-known` URL) can ensure that autoconfig is always used as long as the client uses a non-malicious DNS resolver, e.g. a trusted DoH resolver or a recursive resolver running on a trusted LAN.",
      "createdAt": "2024-08-09T08:12:08Z",
      "updatedAt": "2024-09-24T18:43:36Z",
      "closedAt": "2024-09-24T18:43:36Z",
      "comments": [
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On a second thought, there is still a problem of what to do if `autoconfig.` subdomain resolves to IP address, but we fail to connect due to connection being refused or timeout.",
          "createdAt": "2024-08-11T00:16:51Z",
          "updatedAt": "2024-08-11T00:16:51Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> if DNS resolution fails for autoconfig.example.org, the client should abort the whole configuration procedure?\r\n\r\n> there is still a problem of what to do if autoconfig. subdomain resolves to IP address, but we fail to connect due to connection being refused or timeout.\r\n\r\nExactly. Unfortunately, exactly such failures happen in reality for many domains. We get _all imaginable_ responses, reasonable and not. We get \"no domain\", we get a redirect to a HTML page, we even get resolutions to IP addresses which then do a firewall DROP instead of REJECT, meaning that they never even respond with a \"IP address does not exist\", but they are simply blackholing unknown hosts and we run into TCP level timeouts. We get everything you can imagine, even from important domains. So, we cannot assume a nice explicit \"does not exist\" response. Insisting on it would break all other mechanisms.\r\n\r\n> it is not specified what the client should do if it fails to connect to these URLs.\r\n\r\nActually it is specified:\r\n[4.2](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#section-4.2).  [Central database](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-central-database)\r\n[4.3](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#section-4.3).  [MX](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-mx)\r\n[4.4](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#section-4.4).  [Local disk](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-local-disk)\r\n[4.5](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#section-4.5).  [Other mechanisms](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-other-mechanisms)\r\n[4.6](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#section-4.6).  [Manual configuration](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-manual-configuration)\r\n\r\n[4. Intro](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-config-retrieval-for-mail-c) even explicitly states: \"The steps are ordered by priority. ... a higher priorty result that is available MUST be preferred over a lower priority one\".\r\n\r\nAnd [4.5](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#section-4.5).  [Other mechanisms](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-other-mechanisms) says\r\n\"\r\nIf you implement ... alternative methods, and if they are less secure than some of the mechanisms provided here, the alternative methods SHOULD be considered only with lower priority (as defined above) than the more secure mechanisms defined here. For evaluating other mechanisms, use similar criteria as outlined in section \"Security considerations\".\r\n\"\r\n\r\nSo, it is indeed \"specified what the client should do if it fails to connect to these URLs\", so closing.",
          "createdAt": "2024-09-24T18:43:36Z",
          "updatedAt": "2024-09-24T18:43:36Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOKo_bRc6UXdeX",
      "title": "Consider HTTP downgrade attacks",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/12",
      "state": "CLOSED",
      "author": "mimi89999",
      "authorAssociation": "NONE",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "In the security considerations only an attack on the DNS protocol was considered and DoH was presented as a possible mitigation.\n\nEven with DNS secured by using DoH, I think it might still be possible for an attacker performing a MITM attack to present a forged configuration.\n\nAn attacker could monitor HTTPS connections and drop them if the value of the SNI header starts with `autoconfig.`. The client could then fallback to the HTTP URL from 1.3 and the attacker could present it with the forged configuration.",
      "createdAt": "2024-08-27T12:15:19Z",
      "updatedAt": "2024-09-24T19:35:48Z",
      "closedAt": "2024-09-24T16:07:25Z",
      "comments": [
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "@benbucksch I saw that the draft was adopted. Could you please give a comment on that issue?",
          "createdAt": "2024-09-24T10:44:50Z",
          "updatedAt": "2024-09-24T10:44:50Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "We try HTTPS first, so if we remove HTTP as well, then we simply fall back into other mechanisms.\r\n\r\nThis HTTP mechanism is necessary, because it delivers a large percentage of the actual configurations in the wild. If we completely ignore those configs, then we won't get a config. The mail client will simply fall back into Exchange AutoDiscover V1, which also falls back to HTTP (and which is outside the scope of this spec), and where HTTP is likewise necessary to work, because delivers 90% of the configs. If you disable that as well, you simply get no config, and then all bets are off.\r\n\r\nAlthough many many many community members have complained about this, nobody was able to show an alternative solution that actually works for hosters in practice.\r\n\r\nI cannot see a way to make it 100% bullet proof and still work as well for end users to find a working config.\r\n\r\nThere are several mitigations, which are also mentioned in the specification:\r\n* The attacker would need to sit between the user and the server. This requires physical access or national level access. While such scenarios exist, this prevents by far most attackers.\r\n* It requires an active attack, not just a passive attack. This presents a hurdle for attackers that operate on the national level, because it exposes them. Same is true for attackers with physical access who want to stay undetected. There are nations who do not care, and are well-known to hack their citizens, but then their citiens can be more careful, see below.\r\n* In 15 years since this protocol is deployed in the wild, I have never heard of such an attack. That is despite that many many many community members like you have complained about HTTP. Not even a single one has reported an actual attack. Just because a problem never happened so far doesn't mean it will not become a problem in the future (compare plain text passwords for IMAP in 1995), but it is one factor. OTOH, autoconfig helps 100000 people *every day* to configure their email address, and if we removed HTTP, it would not work for them in many cases.\r\n* The attacker would need to time the attack in the exact moment when the user configures his email address. This normally happens only once every few years. This makes autoconfig a very unattractive target for attackers. The spec specifically discourages from regularly running the autoconfig for reconfig, for this reason. An attacker could also block the mail server config, provoking a user into a new config. However, most users would simply complain about the server failing to the admin, which would make the attack visible.\r\n* Most importantly, the user has to explicitly verify the configuration. This is a _mandatory_ part of the protocol, exactly because we cannot be 100% certain and bullet proof, at least not in theory.\r\n\r\nSo, I believe that the *combination* of the above factors puts the bar for attackers sufficiently hight that th\r\n\r\nLast but not least, the HTTP URL explicitly and intentionally marked as \"optional\", therefore it's up to the mail client implementation to decide whether they want to implement this mechanism. But they should be aware that if they do not implement it, they simply won't be able to configure many of the email addresses.",
          "createdAt": "2024-09-24T16:05:47Z",
          "updatedAt": "2024-09-24T16:05:47Z"
        },
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "> The attacker would need to sit between the user and the server. This requires physical access or national level access. While such scenarios exist, this prevents by far most attackers.\r\n\r\nTargeted attacks are indeed difficult, but opportunistic ones are not. Think about an attacker with an access point in an airport/cafe/restaurant/university/library/whatever. He could gather credentials and then use them to extract sensitive data from the inbox or attempt to reset passwords to sensitive online accounts as most send password reset links via e-mail without requiring any additional authentication.\r\n\r\n> It requires an active attack, not just a passive attack. This presents a hurdle for attackers that operate on the national level, because it exposes them. Same is true for attackers with physical access who want to stay undetected. There are nations who do not care, and are well-known to hack their citizens, but then their citiens can be more careful, see below.\r\n\r\n\"You say there is an issue with our Wi-Fi? But it works fine for me. I can access google.com and bbc.com just file. See? Since you really insist, I will ask the IT guy about this. He comes here once a week.\" That's assuming that there is somebody who noticed the attack and had enough technical knowledge to understand what was going on.\r\n\r\n> In 15 years since this protocol is deployed in the wild, I have never heard of such an attack.\r\n\r\nBefore HTTPS was common, warnings against using public Wi-Fi networks were common.\r\n\r\n> The attacker would need to time the attack in the exact moment when the user configures his email address.\r\n\r\nEven if the attack would yield only one pair of credentials after several days, if the inbox contains very sensitive data or the user has sensitive online accounts linked to that e-mail address, it could still make the attack worthy.\r\n\r\n> Most importantly, the user has to explicitly verify the configuration. This is a mandatory part of the protocol, exactly because we cannot be 100% certain and bullet proof, at least not in theory.\r\n\r\nThat's very convenient to put in the spec, but that's basically assuming that the user understands the screen with the configuration and any potentially displayed warnings and not just click through it. That's also assuming that the user knows the correct config or knows how to find it. That's quite unlikely.",
          "createdAt": "2024-09-24T18:44:42Z",
          "updatedAt": "2024-09-24T18:44:42Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> Think about an attacker with an access point in an airport/cafe/restaurant/university/library/whatever. \r\n\r\nYou wouldn't normally configure a new mail account in such situations. Esp. one with \"very sensitive data\". And the rare cases when you do, and the app asks you to check the domain, then you better don't approve a unusual domain.\r\n\r\nThe mitigations work in concert together. You can shoot holes in every single one of them, but **in combination**, the likeliness of a successful attack is very low.\r\n\r\nIt's nice to be 100% secure, but if that's not possible, or it means that we get no config at all in many cases, then that's not helpful for the user.\r\n\r\nThe only working solution I can imagine is to move ISP HTTP (step 1.3) below the ISP DB (step 2.1) in priority, and possibly below MX (step 3.x), if you use DoH.",
          "createdAt": "2024-09-24T19:01:28Z",
          "updatedAt": "2024-09-24T19:16:51Z"
        },
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "If this is considered an acceptable risk, maybe it's worth at least mentioning it in security considerations? That section currently only mentions risks related to the SRV protocol, but not HTTP.",
          "createdAt": "2024-09-24T19:19:32Z",
          "updatedAt": "2024-09-24T19:19:32Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "Fair point, yes.",
          "createdAt": "2024-09-24T19:20:21Z",
          "updatedAt": "2024-09-24T19:20:21Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "Section 9.2 \"DNS\" mentiones in the first sentence: \"Any protocol that relies on DNS without further validation, e.g. http, should be considered insecure.\" However, the title says only \"DNS\", and the rest of the section speaks only about DNS, so it could be clearer, yes.\r\n\r\nAlso, it should maybe explictly explain the above concept of mitigation by a combination of mitigation factors.",
          "createdAt": "2024-09-24T19:23:01Z",
          "updatedAt": "2024-09-24T19:35:48Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOKo_bRc6Xs19f",
      "title": "Security of MX config retrieval method",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/13",
      "state": "CLOSED",
      "author": "mimi89999",
      "authorAssociation": "NONE",
      "assignees": [
        "benbucksch"
      ],
      "labels": [],
      "body": "Hello,\r\n\r\nI have some doubts about the security of the the MX config retrieval method: https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-mx\r\n\r\nThe spec describes the following step:\r\n> Remove the first component from the MX hostname, i.e. everything up to and including the first ., and use that as value for %MXFULLDOMAIN%.\r\n\r\nWhile it's common, to use subdomains like `mx0` in MX records, I don't think that it's prohibited to use domains under a public suffix. In fact https://datatracker.ietf.org/doc/html/rfc1912#section-2.5 states that:\r\n> It is a good idea to give every host an MX record, even if it points to itself!\r\n\r\nTherefore the domain `example.com` could have the following record (omitting some fields for clarity):\r\n```\r\nexample.com.    MX    10    example.com.pl.\r\n```\r\nThe domain `example.com.pl` could also have an MX record pointing to itself:\r\n```\r\nexample.com.pl.    MX    10    example.com.pl.\r\n```\r\n\r\nFollowing the first step and removing the first component will yield `%MXFULLDOMAIN%` equal to `com.pl`. Then in step 3.1 `https://autoconfig.%MXFULLDOMAIN%/.well-known/mail-v1.xml?emailaddress=%EMAILADDRESS%` will be requested, that is `https://autoconfig.com.pl/.well-known/mail-v1.xml`. However, `autoconfig.com.pl` is a domain available for registration.",
      "createdAt": "2024-09-24T11:21:27Z",
      "updatedAt": "2024-09-24T20:14:43Z",
      "closedAt": "2024-09-24T18:25:00Z",
      "comments": [
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "The [spec](https://benbucksch.github.io/autoconfig-spec/draft-ietf-mailmaint-autoconfig.html#name-mx) states:\r\n\"\r\nFrom that MX hostname, 2 values are extracted:\r\n* Remove the first component from the MX hostname, i.e. everything up to and including the first ., and use that as value for %MXFULLDOMAIN%.\r\n* Extract only the second-level domain from the MX hostname, and use that as value for %MXBASEDOMAIN%. To determine the second-level domain, use the [Public Suffic List](https://publicsuffix.org/) or a similarly suited method, to correctly handle domains like \".co.uk\" and \".com.au\".\r\n\r\n\"\r\n\r\n1. The `%MXBASEDOMAIN%` already explicitly refers to the public suffix list and \".com.au\"\r\n2. In your example, the `%MXFULLDOMAIN%` would be shorter than `%MXBASEDOMAIN%`. As the name implies, that was not intended. We could define that `%MXFULLDOMAIN%` should be skipped, if it's shorter than or identical (length) to `%MXBASEDOMAIN%`. That should fix the issue you present here. Would you concur that this solves the issue?\r\n\r\n3. This is an extreme edge case. For important domains, such flimsy domains should not be used. It is the responsibility of the domain owner to ensure that his domain is secure. If \"com.pl\" is not an official domain for public registration, but only a small company reselling domains, then \"example.com.pl\" put itself in an unstable domain. As such, the extend of the problem is very limited to such third level domains.",
          "createdAt": "2024-09-24T15:21:55Z",
          "updatedAt": "2024-09-24T15:23:01Z"
        },
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "> This is an extreme edge case. For important domains, such flimsy domains should not be used. It is the responsibility of the domain owner to ensure that his domain is secure. If \"com.pl\" is not an official domain for public registration, but only a small company reselling domains, then \"example.com.pl\" put itself in an unstable domain. As such, the extend of the problem is very limited to such third level domains.\r\n\r\nThe `com.pl` domain is managed by the `.pl` registry. It's one of the functional domains: https://dns.pl/lista_domen_funkcjonalnych. They also have some regional domains: https://dns.pl/lista_domen_regionalnych\r\n\r\nIn fact, this will also work for `example.co.uk` with ` autoconfig.co.uk` available for registration and some top level domains like `example.pl` (`autoconfig.pl`), `example.moe` (`autoconfig.moe`), etc. Namecheap shows quite an impressive list: https://www.namecheap.com/domains/registration/results/?type=beast&share=150e9d107aa011efb5bd8b16e8d18951&sort=Default\r\n\r\n> In your example, the %MXFULLDOMAIN% would be shorter than %MXBASEDOMAIN%. As the name implies, that was not intended. We could define that %MXFULLDOMAIN% should be skipped, if it's shorter than or identical (length) to %MXBASEDOMAIN%. That should fix the issue you present here. Would you concur that this solves the issue?\r\n\r\nI think that this will mostly solve the issue. While the name might suggest that, I believe that it's better to explicitly state that in the spec. There are some rare cases of domains like `netlib.re` with subdomains available for registration that are not present in the [PLS](https://publicsuffix.org/list/public_suffix_list.dat), but those are flimsy domains that you talked about in 3.",
          "createdAt": "2024-09-24T18:17:18Z",
          "updatedAt": "2024-09-24T18:17:18Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> I think that this will mostly solve the issue. While the name might suggest that, I believe that it's better to explicitly state that in the spec\r\n\r\nOK, fixed in d53b5beeb. Thanks for pointing this out.",
          "createdAt": "2024-09-24T18:25:54Z",
          "updatedAt": "2024-09-24T18:25:54Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "I've simplified this to: \"... `%MXFULLDOMAIN%`. Use it only if it is longer than `%MXBASEDOMAIN%`.\"",
          "createdAt": "2024-09-24T18:28:50Z",
          "updatedAt": "2024-09-24T18:28:50Z"
        },
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "> If it is shorter or the same length as `%MXBASEDOMAIN%`, then skip it.\r\n\r\nMaybe changing the wording to include `MUST` would be better? Also 3.1 should be skipped.",
          "createdAt": "2024-09-24T18:48:08Z",
          "updatedAt": "2024-09-24T18:48:36Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> Maybe changing the wording to include MUST would be better?\r\n\r\nAs mentioned, I've changed it so \"Use it only if it is longer than `%MXBASEDOMAIN%`.\"\r\n\r\n> Also 3.1 should be skipped.\r\n\r\nYes, that's what the sentence above means. 3.1 is `https://autoconfig.%MXFULLDOMAIN%/.well-known/mail-v1.xml?emailaddress=%EMAILADDRESS%` , so if you're not using `%MXFULLDOMAIN%`, that means you're skipping this step 3.1.",
          "createdAt": "2024-09-24T18:53:24Z",
          "updatedAt": "2024-09-24T18:53:24Z"
        },
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "Hm. That makes sense, but I still have some doubts. This is not an obvious issue and I fear that some implementations might make an issue here.",
          "createdAt": "2024-09-24T20:14:42Z",
          "updatedAt": "2024-09-24T20:14:42Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOKo_bRc6Yk1yQ",
      "title": "Breaking changes between version 1.1 and 1.2 (and the future of AutoConfig)",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/15",
      "state": "OPEN",
      "author": "ben221199",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "When comparing my schemas, this are the changes between 1.1 and 1.2:\r\n1. Add `<url>` inside `<incomingServer>`\r\n2. Make `<hostname>`, `<port>`, `<password>` and `<socketType>` inside `<incomingServer>` optional\r\n3. Add `http-basic` as value for `<authentication>` inside `<incomingServer>`\r\n4. Add `jmap`, `ews` and `activesync` to the enum for the `type` attribute on `<incomingServer>`\r\n5. Make `<password>` inside `<outgoingServer>` optional\r\n6. Add `<addressBook>`, `<calendar>`, `<fileShare>`, `<mAuth>`, `<enable>`, `<clientConfigUpdate>` on `<clientConfig>`\r\n7. Add `<inputField>` on `<clientConfig>`\r\n\r\nThere may be more changes that I missed, but I will go with these for now.\r\n\r\n---\r\n\r\nBy the way that ThunderBird is implemented, I assume that extended enums (change 3 and 4) will break the code. Also, in change 1, `<url>` is used instead of `<hostname>` and `<port>`, which likely breaks many clients that expect an hostname and port. Change 7 seems to me like a mistake, because `<inputField>` was inside `<emailProvider>` before. And last, I don't like change 6.\r\n\r\nIn my conclusion, we can minimalize the breaking changes problem to introduce a new 1.2 URL instead of building on the same URL. \r\n\r\n---\r\n\r\nAlso, I don't think we should add all those other types of services in this AutoConfig. Currently, the 1.1 URL is `http://autoconfig.$DOMAIN/mail/config-v1.1.xml?emailaddress=$EMAILADDRESS` (or `http://$DOMAIN/.well-known/autoconfig/mail/config-v1.1.xml?emailaddress=$EMAILADDRESS`). Notice the `mail` part in the URL, so let this be AutoConfig Mail, and lets make an AutoConfig Calendar and AutoConfig Contacts seperately. We may link those URLs in some general AutoConfig file.\r\n\r\nFor now, XML is fine for 1.2, but when developing 2.0, the switch to JSON seems pretty straight forward.",
      "createdAt": "2024-10-01T17:17:04Z",
      "updatedAt": "2024-10-04T14:27:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "Example of my idea:\r\n\r\n## AutoConfig 1.*\r\n\r\nThe XML versions.\r\n\r\nAutoConfig (new spec):\r\n```xml\r\n<clientConfigList version=\"1.0\">\r\n  <clientConfig url=\"https://autoconfig.mozzila.com/mail/config-v1.1.xml\" type=\"mail\" version=\"1.1\"/>\r\n  <clientConfig url=\"https://autoconfig.mozzila.com/mail/config-v1.2.xml\" type=\"mail\" version=\"1.2\"/>\r\n  <clientConfig url=\"https://autoconfig.mozzila.com/calendar/config-v1.0.xml\" type=\"calendar\" version=\"1.0\"/>\r\n  <clientConfig url=\"https://autoconfig.mozzila.com/contacts/config-v1.0.xml\" type=\"contacts\" version=\"1.0\"/>\r\n</clientConfigList>\r\n```\r\n\r\nAutoConfig Mail (<ins>**this spec**</ins>):\r\n```xml\r\n<clientConfig version=\"1.0, 1.1 or 1.2\">\r\n  <emailProvider>\r\n    ...\r\n  </emailProvider>\r\n</clientConfig>\r\n```\r\n\r\nAutoConfig Calendar (new other spec):\r\n```xml\r\n<clientConfig version=\"1.0\">\r\n  <calendarProvider>\r\n    ...\r\n  </calendarProvider>\r\n</clientConfig>\r\n```\r\n\r\nAutoConfig Contacts (new other spec):\r\n```xml\r\n<clientConfig version=\"1.0\">\r\n  <contactsProvider>\r\n    ...\r\n  </contactsProvider>\r\n</clientConfig>\r\n```\r\n\r\n## AutoConfig 2.*'\r\n\r\nThe JSON versions.\r\n\r\nAutoConfig (all specs in one):\r\n```json\r\n{\r\n  \"providers\" : [\r\n    ...\r\n  ]\r\n}\r\n```",
          "createdAt": "2024-10-01T17:27:21Z",
          "updatedAt": "2024-10-01T17:27:21Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> When comparing my schemas, this are the changes between 1.1 and 1.2:\r\n>\r\n>     Add <url> inside <incomingServer>\r\n>     Make <hostname>, <port>, <password> and <socketType> inside <incomingServer> optional\r\n\r\n\r\nDoes XSD support something like \"subclasses\"? That you can define `<incomingServer>` more generally, and then specifically for each protocol?\r\n\r\nIn 1.2 (the current spec), a config \r\n```\r\n<incomingServer type=\"imap\">\r\n  <url>https://example.com</url>\r\n</incomingServer>\r\n```\r\nis **not** valid. And a JMAP server without URL and with hostname and port is not valid.\r\n\r\nVersion 1.1 supported only IMAP and POP3 and therefore the problem didn't appear.\r\n\r\n>     Add `http-basic` as value for `<authentication>` inside `<incomingServer>` \r\n\r\n\r\nDitto. Not valid for IMAP, but only for configs with a URL.\r\n\r\n\r\n>     Make `<password>` inside `<outgoingServer>` optional\r\n\r\n\r\nPassword was always optional for both incomingServer and outgoingServer\r\n\r\n\r\n>     Add `<addressBook>, <calendar>, <fileShare>, <mAuth>, <enable>, <clientConfigUpdate>`\r\n>     Add `<inputField>`\r\n\r\n\r\n`<enable>`, `<clientConfigUpdate>`, `<inputField>` were already there in 1.1 spec, but are not used by Thunderbird.\r\n\r\nhttps://wiki.mozilla.org/index.php?title=Thunderbird:Autoconfiguration:ConfigFileFormat&oldid=1227306 (revision from 2020)\r\n\r\n",
          "createdAt": "2024-10-01T17:51:02Z",
          "updatedAt": "2024-10-01T17:51:02Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> By the way that ThunderBird is implemented, I assume that extended enums (change 3 and 4) will break the code. Also, in change 1, <url> is used instead of <hostname> and <port>, which likely breaks many clients that expect an hostname and port.\r\n\r\nhm, interesting. I checked. From how I wrote the Thunderbird code back then, and how I read it now, there is a [try/catch](https://searchfox.org/comm-central/source/mail/components/accountcreation/modules/readFromXML.sys.mjs#196) around the processing of an `<incomingServer>` element. Yes, `type=\"jmap\"` would throw, it would be cause *inside* the `for` loop, and the code would start reading the next `<incomingServer>`. After the loop, there's a check whether *any* valid `<incomingServer>` was found. If so, that config is used and the \"invalid\" (actually not yet supported) config is simply ignored. If no config at all is found (`if (!d.incoming.hostname)`), then it would throw the error and stop.\r\n\r\nSo, effect is: Thunderbird would ignore an `<incomingServer type=\"jmap\">` as if it doesn't exist, and continue reading the rest of the config. So, I don't see a problem.\r\n\r\nWould you concur with my reading of the code?\r\n\r\nYou have a good point, though: The spec should mandate clients to ignore config parts that the client cannot understand, but process the rest. This is the only way that we can continue evolving the spec. Otherwise we're completely stuck.",
          "createdAt": "2024-10-01T18:00:19Z",
          "updatedAt": "2024-10-01T18:00:19Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> Example of my idea:\r\n> ```\r\n> <clientConfigList version=\"1.0\">\r\n>   <clientConfig url=\"https://autoconfig.mozzila.com/mail/config-v1.1.xml\" type=\"mail\" version=\"1.1\"/>\r\n>   <clientConfig url=\"https://autoconfig.mozzila.com/mail/config-v1.2.xml\" type=\"mail\" version=\"1.2\"/>\r\n>   <clientConfig url=\"https://autoconfig.mozzila.com/calendar/config-v1.0.xml\" type=\"calendar\" version=\"1.0\"/>\r\n>   <clientConfig url=\"https://autoconfig.mozzila.com/contacts/config-v1.0.xml\" type=\"contacts\" version=\"1.0\"/>\r\n> </clientConfigList>\r\n> ```\r\n\r\nThanks for the idea. But I disagree here.\r\n\r\n1. All services that hosters provide to users and that mail apps may reasonably implement should be in the config. Even chat and video conference accounts. The mail client should have to read only this one file to set up this email account with all associated services.\r\n\r\n2. Creating multiple separate autoconfig protocols or URLs creates more burden for implementors, and we'll need to make even more URL queries. We already have many URL queries, to cover different scenarios and providers. I don't want to multiply by 4 or 6. It would also increase the possibilities to fail.\r\n\r\n3. An email client should also sync contacts, otherwise it's hard to send mail. If it does calendar, and the email account supports calendar sync, why would you not have that set up? If you do, why not do it in the same doc?\r\n\r\n4. The separation makes even less sense for protocols like JMAP, EWS, ActiveSync, MS Graph. Basically *all* modern mail protocols come with contact and calendar sync already built in, on the very same server connection. Why artifically separate it for autoconfig, when it's already united in the server protocols?",
          "createdAt": "2024-10-01T18:08:16Z",
          "updatedAt": "2024-10-01T18:12:51Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "> You have a good point, though: The spec should mandate clients to ignore config parts that the client cannot understand, but process the rest. This is the only way that we can continue evolving the spec. Otherwise we're completely stuck.\r\n\r\nI have no problems with the current spec being strict. We are talking about XML here, so having a XML namespace with some rules seems fine with me.\r\n\r\nI think we can change this as soon as we start working on AutoConfig 2.0 with JSON, but for XML I think we need some form of XSD strictness.",
          "createdAt": "2024-10-04T11:54:03Z",
          "updatedAt": "2024-10-04T11:55:18Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "> > Example of my idea:\r\n> > ```\r\n> > <clientConfigList version=\"1.0\">\r\n> >   <clientConfig url=\"https://autoconfig.mozzila.com/mail/config-v1.1.xml\" type=\"mail\" version=\"1.1\"/>\r\n> >   <clientConfig url=\"https://autoconfig.mozzila.com/mail/config-v1.2.xml\" type=\"mail\" version=\"1.2\"/>\r\n> >   <clientConfig url=\"https://autoconfig.mozzila.com/calendar/config-v1.0.xml\" type=\"calendar\" version=\"1.0\"/>\r\n> >   <clientConfig url=\"https://autoconfig.mozzila.com/contacts/config-v1.0.xml\" type=\"contacts\" version=\"1.0\"/>\r\n> > </clientConfigList>\r\n> > ```\r\n> \r\n> Thanks for the idea. But I disagree here.\r\n> \r\n> 1. All services that hosters provide to users and that mail apps may reasonably implement should be in the config. Even chat and video conference accounts. The mail client should have to read only this one file to set up this email account with all associated services.\r\n\r\nI agree that having to check as less files as possible is the best approach, yes.\r\n\r\n> 2. Creating multiple separate autoconfig protocols or URLs creates more burden for implementors, and we'll need to make even more URL queries. We already have many URL queries, to cover different scenarios and providers. I don't want to multiply by 4 or 6. It would also increase the possibilities to fail.\r\n\r\nAgreed, but sometimes the history of a spec forces you to introduce a new URL, in this case because this has been done before with 1.0 to 1.1 and because there could be breaking changes.\r\n\r\n> 3. An email client should also sync contacts, otherwise it's hard to send mail. If it does calendar, and the email account supports calendar sync, why would you not have that set up? If you do, why not do it in the same doc?\r\n\r\nYeah, like how the ActiveSync is a protocol for all those things. I understand. However, the current URL has `/mail/` in it, so that is why I call it `AutoConfig Mail` and not just `AutoConfig`. Is there a reason to keep the word `/mail/` in it, except for backward compatibility and historic stuff?\r\n\r\n> 4. The separation makes even less sense for protocols like JMAP, EWS, ActiveSync, MS Graph. Basically _all_ modern mail protocols come with contact and calendar sync already built in, on the very same server connection. Why artifically separate it for autoconfig, when it's already united in the server protocols?\r\n\r\nI made the seperation, because it may be an option to want a calendar (ICS/CalDAV) or a contact list (VCF/CardDAV) without any mail, where all those for protocols/formats are also distinct things (like IMAP/POP and SMTP).\r\n\r\n---\r\n\r\nI call the protocol `AutoConfig Mail` (instead of just `AutoConfig`) for a reason. This is because the URL contains the part `/mail/`, but also because is mainly focussed on mail. In my head it a bit strange to have `AutoConfig Mail` also configure your calendar, contacts and even cloud space. There may be reasons for it to keep it `AutoConfig Mail` (with all those configurations), but if you are thinking about dropping the `Mail` part (which seems more logical in that case), an URL without `/mail/` should be used and the versioning should be `1.0` again (because we are technically talking about a new format). This means that, from that moment, you are free to design a fully a new format. This can be XML again, or you could directly choose to do JSON.",
          "createdAt": "2024-10-04T12:25:02Z",
          "updatedAt": "2024-10-04T12:25:02Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> Is there a reason to keep the word /mail/ in it, except for backward compatibility and historic stuff?\r\n\r\nNo, purely for backward compat with existing servers and clients. Mostly the servers. Otherwise we'd also add `.well-known/`. But that's just a string, just ignore what it says.",
          "createdAt": "2024-10-04T14:25:40Z",
          "updatedAt": "2024-10-04T14:25:40Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "> I have no problems with the current spec being strict.\r\n\r\n1.0 was strict and made it impossible to add OAuth2 auth. So, we want to be able to add new properties, elements etc..",
          "createdAt": "2024-10-04T14:27:00Z",
          "updatedAt": "2024-10-04T14:27:00Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOKo_bRc6lD0Va",
      "title": "Suggestion: Add possibility to specify ManageSieve config",
      "url": "https://github.com/benbucksch/autoconfig-spec/issues/16",
      "state": "OPEN",
      "author": "mimi89999",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[RFC 5804](https://datatracker.ietf.org/doc/html/rfc5804) defines a protocol for managing sieve filters. It would be nice to make it possible to automatically discover the endpoint for it.",
      "createdAt": "2025-01-05T12:01:45Z",
      "updatedAt": "2025-01-05T12:01:45Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 2,
      "id": "PR_kwDOKo_bRc5jZP3X",
      "title": "Add Delta Chat to the list of implementations",
      "url": "https://github.com/benbucksch/autoconfig-spec/pull/2",
      "state": "MERGED",
      "author": "link2xt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-07T00:39:46Z",
      "updatedAt": "2024-01-31T19:06:55Z",
      "baseRepository": "benbucksch/autoconfig-spec",
      "baseRefName": "main",
      "baseRefOid": "8988788f3a54cd5836cfaee1b2f2c8c147694ef1",
      "headRepository": "deltachat/autoconfig-spec",
      "headRefName": "link2xt/deltachat",
      "headRefOid": "04a7e0797c3f0a9145492bbcfd4762fc994f36de",
      "closedAt": "2024-01-31T19:06:55Z",
      "mergedAt": "2024-01-31T19:06:55Z",
      "mergedBy": "benbucksch",
      "mergeCommit": {
        "oid": "c2c679ae1c6e450661aae248e6dcb38d25b971dd"
      },
      "comments": [
        {
          "author": "link2xt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Our implementation is here: https://github.com/deltachat/deltachat-core-rust/blob/main/src/configure/auto_mozilla.rs\r\n\r\nURLs tried are here:\r\nhttps://github.com/deltachat/deltachat-core-rust/blob/b9a58bf6258d6d5b60d16cd44318f16b61c6318b/src/configure.rs#L506-L532",
          "createdAt": "2024-01-07T22:57:35Z",
          "updatedAt": "2024-01-07T22:57:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKo_bRc5uizcV",
          "commit": {
            "abbreviatedOid": "04a7e07"
          },
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-31T19:06:41Z",
          "updatedAt": "2024-01-31T19:06:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOKo_bRc5zFHAk",
      "title": "Add XSD schemas",
      "url": "https://github.com/benbucksch/autoconfig-spec/pull/9",
      "state": "CLOSED",
      "author": "ben221199",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This pull request will add the XSD schemas for Autoconfig Mail.",
      "createdAt": "2024-06-20T14:09:00Z",
      "updatedAt": "2024-09-25T16:12:27Z",
      "baseRepository": "benbucksch/autoconfig-spec",
      "baseRefName": "main",
      "baseRefOid": "786d23d0933827cdd36753e26d65d190035b69a2",
      "headRepository": "ben221199/autoconfig-spec",
      "headRefName": "main",
      "headRefOid": "a4061ae9c4796ac7d1cc51a455bae98c7764af4c",
      "closedAt": "2024-09-24T18:47:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "Hi @benbucksch,\r\n\r\nOf course. As far as I know, the XSD of 1.0 is finished and the XSD of 1.1 is almost finished. I'm planning to do 1.2 as soon as I have time.",
          "createdAt": "2024-07-24T07:32:32Z",
          "updatedAt": "2024-07-24T07:32:32Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "@ben221199\r\nIf you have an XSD for 1.2, which is what the specification specifies, that would be very helpful. I'd be happy about that. Please do feel free to open another PR for that.\r\n\r\nI'm going to close this specific PR, because it has only the XSD for 1.0, which was used only few a few months 15 years ago and nobody uses anymore.",
          "createdAt": "2024-09-24T18:47:06Z",
          "updatedAt": "2024-09-24T18:47:23Z"
        },
        {
          "author": "ben221199",
          "authorAssociation": "NONE",
          "body": "Hi @benbucksch, sorry for my inactivity last months. I had to focus on some other projects. I will finish 1.1 and add 1.2 as soon as I have time.",
          "createdAt": "2024-09-24T20:57:00Z",
          "updatedAt": "2024-09-24T20:57:00Z"
        },
        {
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "body": "@ben221199 No problem. Don't worry much about 1.1, because it's not relevant for the spec here.",
          "createdAt": "2024-09-25T16:12:26Z",
          "updatedAt": "2024-09-25T16:12:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKo_bRc6C27N0",
          "commit": {
            "abbreviatedOid": "a4061ae"
          },
          "author": "benbucksch",
          "authorAssociation": "OWNER",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks so much for the XSD!\r\n\r\nHowever, I see that it's a schema for the version 1.0, which was in use only for a few months 15 years ago and has since not been used anymore. It doesn't match the spec anymore.\r\n\r\nWould you mind updating the XSD with the sample in the current spec?",
          "createdAt": "2024-07-24T01:31:02Z",
          "updatedAt": "2024-07-24T01:31:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOKo_bRc59PcKf",
      "title": "Add HTTP security considerations",
      "url": "https://github.com/benbucksch/autoconfig-spec/pull/14",
      "state": "OPEN",
      "author": "mimi89999",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-01T11:36:45Z",
      "updatedAt": "2024-10-14T08:47:06Z",
      "baseRepository": "benbucksch/autoconfig-spec",
      "baseRefName": "main",
      "baseRefOid": "d53b5beeb31c1524020a6105dba858014f941d8f",
      "headRepository": "mimi89999/autoconfig-spec",
      "headRefName": "http_sc",
      "headRefOid": "cfba5ae98e35a4226bad6f371a19a429780e4672",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mimi89999",
          "authorAssociation": "NONE",
          "body": "@benbucksch Could you please review this pull request?",
          "createdAt": "2024-10-14T08:47:05Z",
          "updatedAt": "2024-10-14T08:47:05Z"
        }
      ],
      "reviews": []
    }
  ]
}